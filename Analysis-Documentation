Provide a concise written report that includes:
● Justification for your data structure choices
● Analysis of time and space complexity
● Performance comparison between methods or all the implementations
considered
● Discussion of limitations and potential improvements



Range Query:

Originally, I was planning on using a simple array list and for loops to search through all of the data and reutrn a list of data that fits within our range. 
So for example, I started creating a new ArrayList called newList, and then had a for loop where for each row in the database, 
if the 4th column of data, or data[3] was between the start and end year (inclusive), data[3] would be added to the newlist. 
I had even considered using a HashSet in order to avoid any duplicates. With this execution, the time complexity would have been O(n) because there is a for loop 
which executes n number of times, and the rest is all constant, such as appending to the end of an ArrayList.

However, while trying to make this as efficient as possible, I came across using TreeMaps. My current implementation involves using a TreeMap, that keeps the 
keys in their natural order, which can be beneficial for the future. In my TreeMap, the key is the year, and the value is a list of all of the songs that were 
released in that year. So for eaxmple, if 4 songs were released in 2010, those four songs would be the value to the key "2010".
For the time complexity here, it would be O(log n + k). In a TreeMap, most operations are O(log n). However, because we will be iterating over the number of years 
within the range, this would be O(k). Since we don't know for how many years, we can't determine which is more dominant. However, in such a large dataset, it is 
much more likely that k is relatively smaller compared to n, so we know that using a TreeMap implementation is much better (especially considering the size of 
our dataset).

A limitation is that TreeMap can take up higher memory overhead, and compared to a HashMap with O(1) or constant time operations, it's relatively slow. Duplicates 
currently aren't allowed, so if we wanted to see how many times, it could be a bit problematic. A potential improvement is storing my variables in a new class 
instead of as Strings.
